using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class HullGameUI : MonoBehaviour
{
    [Header("UI References")]
    [SerializeField] private GameObject buildPanel;
    [SerializeField] private Button buildModeButton;
    [SerializeField] private Button spaceModeButton;
    [SerializeField] private Button clearHullButton;
    [SerializeField] private Button saveHullButton;
    [SerializeField] private Button loadHullButton;
    
    [Header("Status Display")]
    [SerializeField] private TextMeshProUGUI statusText;
    [SerializeField] private TextMeshProUGUI pointsCountText;
    [SerializeField] private TextMeshProUGUI wallsCountText;
    [SerializeField] private TextMeshProUGUI doorsCountText;
    
    [Header("Instructions")]
    [SerializeField] private GameObject instructionsPanel;
    [SerializeField] private TextMeshProUGUI instructionsText;
    
    private HULL hullComponent;
    private HullBuilder hullBuilder;
    
    void Start()
    {
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        hullComponent = FindObjectOfType<HULL>();
        hullBuilder = FindObjectOfType<HullBuilder>();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
        SetupUI();
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        SubscribeToEvents();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        ShowInstructions();
    }
    
    void OnDestroy()
    {
        UnsubscribeFromEvents();
    }
    
    private void SetupUI()
    {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        if (buildModeButton != null)
        {
            buildModeButton.onClick.AddListener(OnBuildModeClicked);
        }
        
        if (spaceModeButton != null)
        {
            spaceModeButton.onClick.AddListener(OnSpaceModeClicked);
        }
        
        if (clearHullButton != null)
        {
            clearHullButton.onClick.AddListener(OnClearHullClicked);
        }
        
        if (saveHullButton != null)
        {
            saveHullButton.onClick.AddListener(OnSaveHullClicked);
        }
        
        if (loadHullButton != null)
        {
            loadHullButton.onClick.AddListener(OnLoadHullClicked);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        UpdateStatus();
    }
    
    private void SubscribeToEvents()
    {
        if (hullComponent != null)
        {
            HULL.OnPointAdded += OnPointAdded;
            HULL.OnWallAdded += OnWallAdded;
            HULL.OnDoorAdded += OnDoorAdded;
        }
        
        if (hullBuilder != null)
        {
            HullBuilder.OnBuildingStateChanged += OnBuildingStateChanged;
        }
    }
    
    private void UnsubscribeFromEvents()
    {
        if (hullComponent != null)
        {
            HULL.OnPointAdded -= OnPointAdded;
            HULL.OnWallAdded -= OnWallAdded;
            HULL.OnDoorAdded -= OnDoorAdded;
        }
        
        if (hullBuilder != null)
        {
            HullBuilder.OnBuildingStateChanged -= OnBuildingStateChanged;
        }
    }
    
    private void ShowInstructions()
    {
        if (instructionsPanel != null && instructionsText != null)
        {
            instructionsText.text = 
                "üöÄ –°–ò–°–¢–ï–ú–ê –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê –ö–û–†–ü–£–°–ê\n\n" +
                "üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï:\n" +
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'Build Mode' –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞\n" +
                "‚Ä¢ –ó–∞–∂–º–∏—Ç–µ –õ–ö–ú –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ–Ω\n" +
                "‚Ä¢ –¢–æ—á–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∫ —Å–µ—Ç–∫–µ 1x1–º\n" +
                "‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–¥—É—â—É—é –ø–æ–∑–∏—Ü–∏—é\n\n" +
                "üîß –§–£–ù–ö–¶–ò–ò:\n" +
                "‚Ä¢ Clear Hull - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–ø—É—Å\n" +
                "‚Ä¢ Save Hull - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä–ø—É—Å\n" +
                "‚Ä¢ Load Hull - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–ø—É—Å\n\n" +
                "üí° –°–û–í–ï–¢–´:\n" +
                "‚Ä¢ –°—Ç—Ä–æ–π—Ç–µ –ø–æ —Å–µ—Ç–∫–µ –¥–ª—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏\n" +
                "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ä–∞–±–æ—Ç—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ";
            
            instructionsPanel.SetActive(true);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            Invoke("HideInstructions", 10f);
        }
    }
    
    private void HideInstructions()
    {
        if (instructionsPanel != null)
        {
            instructionsPanel.SetActive(false);
        }
    }
    
    // UI Event Handlers
    private void OnBuildModeClicked()
    {
        if (SHIP_UI.Instance != null)
        {
            SHIP_UI.Instance.SetState(SHIP_UI.State._ship_state_editor_main_module_0);
            UpdateStatus();
        }
    }
    
    private void OnSpaceModeClicked()
    {
        if (SHIP_UI.Instance != null)
        {
            SHIP_UI.Instance.SetState(SHIP_UI.State._ship_state_space);
            UpdateStatus();
        }
    }
    
    private void OnClearHullClicked()
    {
        if (hullComponent != null)
        {
            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–ø—É—Å
            string emptyHull = "{\"points\":[],\"walls\":[],\"doors\":[]}";
            hullComponent.DeserializeHull(emptyHull);
            
            Debug.Log("[HullGameUI] –ö–æ—Ä–ø—É—Å –æ—á–∏—â–µ–Ω");
            UpdateStatus();
        }
    }
    
    private void OnSaveHullClicked()
    {
        if (hullComponent != null)
        {
            string hullData = hullComponent.SerializeHull();
            PlayerPrefs.SetString("SavedHull", hullData);
            PlayerPrefs.Save();
            
            Debug.Log("[HullGameUI] –ö–æ—Ä–ø—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
            UpdateStatus();
        }
    }
    
    private void OnLoadHullClicked()
    {
        if (hullComponent != null)
        {
            string hullData = PlayerPrefs.GetString("SavedHull", "");
            if (!string.IsNullOrEmpty(hullData))
            {
                hullComponent.DeserializeHull(hullData);
                Debug.Log("[HullGameUI] –ö–æ—Ä–ø—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω");
            }
            else
            {
                Debug.LogWarning("[HullGameUI] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–∞");
            }
            
            UpdateStatus();
        }
    }
    
    // Event Handlers
    private void OnPointAdded(HullPoint point)
    {
        UpdateStatus();
    }
    
    private void OnWallAdded(HullWall wall)
    {
        UpdateStatus();
    }
    
    private void OnDoorAdded(HullDoor door)
    {
        UpdateStatus();
    }
    
    private void OnBuildingStateChanged(bool isActive)
    {
        UpdateStatus();
    }
    
    private void UpdateStatus()
    {
        if (statusText != null)
        {
            bool isBuilding = (hullBuilder != null && hullBuilder.IsBuildingActive);
            string status = isBuilding ? "üî® –†–ï–ñ–ò–ú –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê" : "üöÄ –†–ï–ñ–ò–ú –ö–û–°–ú–û–°–ê";
            statusText.text = status;
        }
        
        if (pointsCountText != null && hullComponent != null)
        {
            pointsCountText.text = $"–¢–æ—á–∫–∏: {hullComponent.points?.Count ?? 0}";
        }
        
        if (wallsCountText != null && hullComponent != null)
        {
            wallsCountText.text = $"–°—Ç–µ–Ω—ã: {hullComponent.walls?.Count ?? 0}";
        }
        
        if (doorsCountText != null && hullComponent != null)
        {
            doorsCountText.text = $"–î–≤–µ—Ä–∏: {hullComponent.doors?.Count ?? 0}";
        }
    }
    
    void Update()
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
        if (Time.frameCount % 30 == 0)
        {
            UpdateStatus();
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
        HandleKeyboardInput();
    }
    
    private void HandleKeyboardInput()
    {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ø–æ –∫–ª–∞–≤–∏—à–∞–º
        if (Input.GetKeyDown(KeyCode.B))
        {
            OnBuildModeClicked();
        }
        
        if (Input.GetKeyDown(KeyCode.S))
        {
            OnSpaceModeClicked();
        }
        
        if (Input.GetKeyDown(KeyCode.C))
        {
            OnClearHullClicked();
        }
        
        if (Input.GetKeyDown(KeyCode.F5))
        {
            OnSaveHullClicked();
        }
        
        if (Input.GetKeyDown(KeyCode.F9))
        {
            OnLoadHullClicked();
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if (Input.GetKeyDown(KeyCode.F1))
        {
            if (instructionsPanel != null)
            {
                instructionsPanel.SetActive(!instructionsPanel.activeSelf);
            }
        }
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    public void ShowBuildPanel()
    {
        if (buildPanel != null)
        {
            buildPanel.SetActive(true);
        }
    }
    
    public void HideBuildPanel()
    {
        if (buildPanel != null)
        {
            buildPanel.SetActive(false);
        }
    }
} 