using UnityEngine;

public class HullQuickTest : MonoBehaviour
{
    [Header("Quick Test")]
    [SerializeField] private bool runTestOnStart = true;
    
    void Start()
    {
        if (runTestOnStart)
        {
            Invoke("RunQuickTest", 1f); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        }
    }
    
    void RunQuickTest()
    {
        Debug.Log("=== HULL SYSTEM QUICK TEST ===");
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        TestComponents();
        
        // –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        TestStateSwitch();
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
        TestEvents();
        
        Debug.Log("=== QUICK TEST COMPLETED ===");
    }
    
    void TestComponents()
    {
        Debug.Log("–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º SHIP_UI
        if (SHIP_UI.Instance != null)
        {
            Debug.Log("‚úì SHIP_UI –Ω–∞–π–¥–µ–Ω");
        }
        else
        {
            Debug.LogError("‚úó SHIP_UI –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º HULL
        HULL hull = FindObjectOfType<HULL>();
        if (hull != null)
        {
            Debug.Log("‚úì HULL –Ω–∞–π–¥–µ–Ω");
        }
        else
        {
            Debug.LogWarning("‚ö† HULL –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π");
            CreateTestHull();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º HullBuilder
        HullBuilder builder = FindObjectOfType<HullBuilder>();
        if (builder != null)
        {
            Debug.Log("‚úì HullBuilder –Ω–∞–π–¥–µ–Ω");
        }
        else
        {
            Debug.LogWarning("‚ö† HullBuilder –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π");
            CreateTestBuilder();
        }
    }
    
    void TestStateSwitch()
    {
        Debug.Log("–¢–µ—Å—Ç 2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π");
        
        if (SHIP_UI.Instance != null)
        {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
            SHIP_UI.Instance.SetState(SHIP_UI.State._ship_state_editor_main_module_0);
            Debug.Log("‚úì –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞");
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            Invoke("SwitchBackToSpace", 2f);
        }
        else
        {
            Debug.LogError("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ - SHIP_UI –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }
    
    void SwitchBackToSpace()
    {
        if (SHIP_UI.Instance != null)
        {
            SHIP_UI.Instance.SetState(SHIP_UI.State._ship_state_space);
            Debug.Log("‚úì –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º –∫–æ—Å–º–æ—Å–∞");
        }
    }
    
    void TestEvents()
    {
        Debug.Log("–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π");
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        HULL.OnPointAdded += OnTestPointAdded;
        HULL.OnWallAdded += OnTestWallAdded;
        HULL.OnDoorAdded += OnTestDoorAdded;
        
        HullBuilder.OnBuildModeChanged += OnTestBuildModeChanged;
        HullBuilder.OnBuildingStateChanged += OnTestBuildingStateChanged;
        
        Debug.Log("‚úì –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è");
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        Invoke("UnsubscribeFromEvents", 5f);
    }
    
    void CreateTestHull()
    {
        GameObject hullObject = new GameObject("TestHull");
        HULL hull = hullObject.AddComponent<HULL>();
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ—Ñ–∞–±—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        CreateTestPrefabs();
        
        Debug.Log("‚úì –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π HULL");
    }
    
    void CreateTestBuilder()
    {
        GameObject builderObject = new GameObject("TestHullBuilder");
        HullBuilder builder = builderObject.AddComponent<HullBuilder>();
        
        // –ù–∞—Ö–æ–¥–∏–º HULL –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–≥–æ
        HULL hull = FindObjectOfType<HULL>();
        if (hull != null)
        {
            builder.hullComponent = hull;
        }
        
        Debug.Log("‚úì –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π HullBuilder");
    }
    
    void CreateTestPrefabs()
    {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ—Ñ–∞–±—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        GameObject pointPrefab = new GameObject("TestPointPrefab");
        pointPrefab.AddComponent<HullPointPrefab>();
        
        GameObject wallPrefab = new GameObject("TestWallPrefab");
        wallPrefab.AddComponent<HullWallPrefab>();
        
        GameObject doorPrefab = new GameObject("TestDoorPrefab");
        doorPrefab.AddComponent<HullDoorPrefab>();
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–µ—Ñ–∞–±—ã –≤ HULL
        HULL hull = FindObjectOfType<HULL>();
        if (hull != null)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º reflection –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ—Ñ–∞–±–æ–≤
            var pointField = typeof(HULL).GetField("pointPrefab", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var wallField = typeof(HULL).GetField("wallPrefab", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var doorField = typeof(HULL).GetField("doorPrefab", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            if (pointField != null) pointField.SetValue(hull, pointPrefab);
            if (wallField != null) wallField.SetValue(hull, wallPrefab);
            if (doorField != null) doorField.SetValue(hull, doorPrefab);
        }
        
        Debug.Log("‚úì –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ—Ñ–∞–±—ã");
    }
    
    void UnsubscribeFromEvents()
    {
        HULL.OnPointAdded -= OnTestPointAdded;
        HULL.OnWallAdded -= OnTestWallAdded;
        HULL.OnDoorAdded -= OnTestDoorAdded;
        
        HullBuilder.OnBuildModeChanged -= OnTestBuildModeChanged;
        HullBuilder.OnBuildingStateChanged -= OnTestBuildingStateChanged;
        
        Debug.Log("‚úì –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Å–æ–±—ã—Ç–∏–π");
    }
    
    // Event handlers –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    void OnTestPointAdded(HullPoint point)
    {
        Debug.Log($"üéØ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ {point.id} –≤ {point.position}");
    }
    
    void OnTestWallAdded(HullWall wall)
    {
        Debug.Log($"üß± –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–µ–Ω–∞ {wall.length}m –æ—Ç {wall.startPointId} –∫ {wall.endPointId}");
    }
    
    void OnTestDoorAdded(HullDoor door)
    {
        Debug.Log($"üö™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–≤–µ—Ä—å –º–µ–∂–¥—É {door.startPointId} –∏ {door.endPointId}");
    }
    
    void OnTestBuildModeChanged(HullBuilder.BuildMode mode)
    {
        Debug.Log($"üîß –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: –†–µ–∂–∏–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {mode}");
    }
    
    void OnTestBuildingStateChanged(bool isActive)
    {
        Debug.Log($"‚ö° –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ {(isActive ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ")}");
    }
    
    // UI –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    void OnGUI()
    {
        if (!Application.isPlaying) return;
        
        GUILayout.BeginArea(new Rect(Screen.width - 310, 10, 300, 300));
        GUILayout.Label("Hull Quick Test", GUI.skin.box);
        
        if (GUILayout.Button("Run Quick Test"))
        {
            RunQuickTest();
        }
        
        if (GUILayout.Button("Switch to Build Mode"))
        {
            if (SHIP_UI.Instance != null)
            {
                SHIP_UI.Instance.SetState(SHIP_UI.State._ship_state_editor_main_module_0);
            }
        }
        
        if (GUILayout.Button("Switch to Space Mode"))
        {
            if (SHIP_UI.Instance != null)
            {
                SHIP_UI.Instance.SetState(SHIP_UI.State._ship_state_space);
            }
        }
        
        if (GUILayout.Button("Create Test Hull"))
        {
            CreateTestHull();
        }
        
        if (GUILayout.Button("Create Test Builder"))
        {
            CreateTestBuilder();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        GUILayout.Label("Status:", GUI.skin.box);
        GUILayout.Label($"SHIP_UI: {(SHIP_UI.Instance != null ? "‚úì" : "‚úó")}");
        GUILayout.Label($"HULL: {(FindObjectOfType<HULL>() != null ? "‚úì" : "‚úó")}");
        GUILayout.Label($"HullBuilder: {(FindObjectOfType<HullBuilder>() != null ? "‚úì" : "‚úó")}");
        
        GUILayout.EndArea();
    }
} 