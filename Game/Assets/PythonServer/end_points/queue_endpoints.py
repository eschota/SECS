# 
# создать endpoint для работы с очередями
# class queue_ticket: # билет в очередь для создания матча

#     queue_ticket_id: int - уникальный идентификатор очереди, auto increment
#     queue_match_type: int - очереди для разных типов матчей
#     queue_player: int - игрок
#     queue_ticket_register_time: datetime - время добавления в очередь
#     queue_ticket_match_type: int - тип матча
#     queue_ticket_player_mmr: int - рейтинг игрока для подбора матча.
#     queue_ticket_player_mmr_threshold: int - порог рейтинга игрока для подбора матча. изменяется соответственно all_mmr_min_limit_threshold и all_mmr_time_in_seconds_to_raise_threshold
 

# 
# Приоритет созданяи матча:
#  должны участвовать игроки с ближайшим рейтингом mmr к рейтингу игрока, который отправил запрос на вход в очередь.

# START:
# функция Create_Queues - создает все типы очередей с нуля при старте сервера.
# UPDATE every 1 second:
# функция ProcessQueue - проверяет очередь на матчи, сортирует игроков по времени, если есть условия удовлетворяющие созданию матча, то создается матч.
# on Demand:
# функция CreateMatch - создает матч, при удовлетворении условиям создания матча. Удаляет билеты из очереди и назначет player.current_match=match_id. для всех игроков в матче.

# Принцип работы очереди: бесконечно зацикленная функция ProcessQueue, которая проверяет очередь на матчи, сортирует игроков по времени создания билета в очередь , если есть условия удовлетворяющие созданию матча, то создается матч.
# Приоритет у игрока с большим временем ожидания в очереди.
# 
#
#
#
#
#
#
#
# Все запросы на сервер должны быть авторизованы токеном администратора.
#
#
#
#
#
# Queue Ограничения: 
# 1. игрок не может состоять в очереди на несколько типов матчей одновременно.
# 2. игрок не может попасть в очередь если он уже в матче ?player.current_match!=null.
# 
# Queue endpoints:
#/ GET - возвращает все очереди.
#/ POST - добавляет пользователя в очередь. с обязательными параметрами: queue_match_type, player_id.
#/ DELETE - удаляет пользователя из очереди. с обязательными параметрами:  player_id. перебор по всем очередям по player_id.
#/ PUT - обновляет данные очереди. с обязательными параметрами: queue_match_type, player_id.
# РАБОТА С ОЧЕРЕДЯМИ В ПАМЯТИ, БЕЗ ИСПОЛЬЗОВАНИЯ БАЗЫ ДАННЫХ. База данных используется только для работы с игроками.
# 
from .static import * # для авторизации запросов на сервер.

# Queue условия для создания матча:
# 1. разница в рейтинге между игроками должна быть не меньше mmr_min_limit_threshold
# 2. шаг повышения порога в процентах при превышении mmr_time_in_seconds_to_raise_threshold в ожидании очереди на матч

all_mmr_min_limit_threshold = 25 # минимальная разница для создания матча
all_mmr_time_in_seconds_to_raise_threshold = 10 # время в секундах для повышения порога
all_mmr_raise_threshold_step = 0.1 # шаг повышения порога в процентах при превышенииmmr_time_in_seconds_to_raise_threshold в ожидании очереди на матч




from flask import Blueprint, request, jsonify
import json
from database import db
import uuid

queue_bp = Blueprint('queue', __name__)  

