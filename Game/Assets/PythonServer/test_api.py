#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
"""

import requests
import json
import time
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = "https://renderfin.com"
ADMIN_TOKEN = "ZXCVBNM,1234567890"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
ADMIN_HEADERS = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {ADMIN_TOKEN}'
}

# –û–±—ã—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
HEADERS = {
    'Content-Type': 'application/json'
}

def test_endpoint(method, url, data=None, headers=None, expected_status=200):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint"""
    try:
        print(f"\nüîç Testing {method} {url}")
        
        if method == 'GET':
            response = requests.get(url, headers=headers, timeout=10)
        elif method == 'POST':
            response = requests.post(url, json=data, headers=headers, timeout=10)
        elif method == 'PUT':
            response = requests.put(url, json=data, headers=headers, timeout=10)
        elif method == 'DELETE':
            response = requests.delete(url, json=data, headers=headers, timeout=10)
        
        print(f"Status: {response.status_code}")
        
        if response.status_code == expected_status:
            print("‚úÖ SUCCESS")
            try:
                result = response.json()
                print(f"Response: {json.dumps(result, indent=2)}")
                return result
            except:
                print(f"Response: {response.text}")
                return response.text
        else:
            print(f"‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
            try:
                error = response.json()
                print(f"Error: {json.dumps(error, indent=2)}")
            except:
                print(f"Error: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå EXCEPTION: {e}")
        return None

def test_server_basic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ endpoints —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\n" + "="*60)
    print("üöÄ TESTING BASIC SERVER ENDPOINTS")
    print("="*60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    test_endpoint('GET', f"{API_BASE_URL}/")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ–±–±–∏
    test_endpoint('GET', f"{API_BASE_URL}/api-game-lobby/")

def test_user_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ endpoints"""
    print("\n" + "="*60)
    print("üë§ TESTING USER ENDPOINTS")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_data = {
        "email": "test@example.com",
        "password": "testpass123",
        "nick_name": "TestPlayer"
    }
    
    user_result = test_endpoint('POST', f"{API_BASE_URL}/api-game-user/register", test_user_data, HEADERS, 201)
    
    if user_result:
        player_id = user_result.get('player_id')
        print(f"Created test user: {player_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_endpoint('GET', f"{API_BASE_URL}/api-game-user/{player_id}", headers=HEADERS)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        login_data = {
            "email": "test@example.com",
            "password": "testpass123"
        }
        test_endpoint('POST', f"{API_BASE_URL}/api-game-user/login", login_data, HEADERS)
        
        return player_id
    
    return None

def test_lobby_endpoints(player_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç lobby endpoints"""
    print("\n" + "="*60)
    print("üèõÔ∏è TESTING LOBBY ENDPOINTS")
    print("="*60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏
    join_data = {"player_id": player_id}
    test_endpoint('POST', f"{API_BASE_URL}/api-game-lobby/join", join_data, HEADERS)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ª–æ–±–±–∏
    test_endpoint('GET', f"{API_BASE_URL}/api-game-lobby/users", headers=HEADERS)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –ª–æ–±–±–∏
    test_endpoint('POST', f"{API_BASE_URL}/api-game-lobby/leave", join_data, HEADERS)

def test_queue_endpoints(player_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç queue endpoints"""
    print("\n" + "="*60)
    print("‚è±Ô∏è TESTING QUEUE ENDPOINTS")
    print("="*60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π
    test_endpoint('GET', f"{API_BASE_URL}/api-game-queue/", headers=HEADERS)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    queue_data = {
        "queue_match_type": 0,  # 1v1
        "player_id": player_id
    }
    test_endpoint('POST', f"{API_BASE_URL}/api-game-queue/", queue_data, HEADERS)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    test_endpoint('GET', f"{API_BASE_URL}/api-game-queue/player/{player_id}", headers=HEADERS)
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥
    print("\n‚è≥ Waiting for potential matchmaking...")
    time.sleep(5)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    remove_data = {"player_id": player_id}
    test_endpoint('DELETE', f"{API_BASE_URL}/api-game-queue/", remove_data, HEADERS)

def test_match_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç match endpoints"""
    print("\n" + "="*60)
    print("üéÆ TESTING MATCH ENDPOINTS")
    print("="*60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π
    test_endpoint('GET', f"{API_BASE_URL}/api-game-match/", headers=HEADERS)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á (—Ç—Ä–µ–±—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞)
    match_data = {
        "match_type": "1v1",
        "players": ["user_1", "user_2"]
    }
    match_result = test_endpoint('POST', f"{API_BASE_URL}/api-game-match/", match_data, ADMIN_HEADERS, 201)
    
    if match_result:
        match_id = match_result.get('match_id')
        print(f"Created test match: {match_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
        test_endpoint('GET', f"{API_BASE_URL}/api-game-match/{match_id}", headers=HEADERS)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–∞—Ç—á
        action_data = {
            "player_id": "user_1",
            "action_type": "test_action",
            "action_data": {"test": "data"}
        }
        test_endpoint('POST', f"{API_BASE_URL}/api-game-match/{match_id}/action", action_data, HEADERS)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–∞
        finish_data = {
            "winners": ["user_1"],
            "losers": ["user_2"]
        }
        test_endpoint('POST', f"{API_BASE_URL}/api-game-match/{match_id}/finish", finish_data, ADMIN_HEADERS)

def test_admin_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ endpoints"""
    print("\n" + "="*60)
    print("üîê TESTING ADMIN ENDPOINTS")
    print("="*60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—á–µ—Ä–µ–¥–∏
    queue_settings = {
        "mmr_min_limit_threshold": 30,
        "mmr_time_in_seconds_to_raise_threshold": 15,
        "mmr_raise_threshold_step": 0.15
    }
    test_endpoint('PUT', f"{API_BASE_URL}/api-game-queue/", queue_settings, ADMIN_HEADERS)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
    test_endpoint('POST', f"{API_BASE_URL}/api-game-queue/clear", {}, ADMIN_HEADERS)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ GAME SERVER API TESTING SUITE")
    print("="*60)
    print(f"Target Server: {API_BASE_URL}")
    print("="*60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ endpoints
        test_server_basic()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ endpoints
        player_id = test_user_endpoints()
        
        if player_id:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º lobby endpoints
            test_lobby_endpoints(player_id)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º queue endpoints
            test_queue_endpoints(player_id)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º match endpoints
        test_match_endpoints()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ endpoints
        test_admin_endpoints()
        
        print("\n" + "="*60)
        print("üéâ TESTING COMPLETED!")
        print("="*60)
        
    except KeyboardInterrupt:
        print("\n‚ùå Testing interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 