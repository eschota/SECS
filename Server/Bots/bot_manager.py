#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#c:\SECS\Server\Bots\start_bot_manager.bat - –∏—Å–ø–æ–ª—å–∑—É–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞.
"""
üéÆ SECS Unified Bot Manager - –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ –¥–ª—è SECS
–í–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, heartbeat, –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""

import requests
import json
import os
import random
import string
import time
import logging
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, List, Optional, Tuple
import threading
from enum import Enum

class BotBehavior(Enum):
    """üéØ –¢–∏–ø—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–æ–≤"""
    AGGRESSIVE = "aggressive"     # –ß–∞—Å—Ç–æ –∏—â–µ—Ç –º–∞—Ç—á–∏
    CASUAL = "casual"            # –ò–Ω–æ–≥–¥–∞ –∏—â–µ—Ç –º–∞—Ç—á–∏
    PASSIVE = "passive"          # –†–µ–¥–∫–æ –∏—â–µ—Ç –º–∞—Ç—á–∏
    RANDOM = "random"            # –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

class MatchType(Enum):
    """üé≤ –¢–∏–ø—ã –º–∞—Ç—á–µ–π"""
    ONE_VS_ONE = 1
    TWO_VS_TWO = 2
    FOUR_PLAYER_FFA = 4

class UnifiedBotsManager:
    """üéÆ –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ –¥–ª—è SECS"""
    
    def __init__(self):
        self.base_url = "https://renderfin.com"
        self.register_endpoint = f"{self.base_url}/api-game-player"
        self.login_endpoint = f"{self.base_url}/api-game-player/login"
        self.heartbeat_endpoint = f"{self.base_url}/api-game-player/heartbeat"
        self.queue_endpoint = f"{self.base_url}/api-game-queue"
        self.match_endpoint = f"{self.base_url}/api-game-match"
        
        self.bots_data_dir = "bots_data"
        self.bots_list_file = os.path.join(self.bots_data_dir, "bots_list.json")
        
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'SECS-Unified-Bot-Manager/1.0'
        })
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç—ã—Å—è—á –∏–≥—Ä–æ–∫–æ–≤
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry
        
        retry_strategy = Retry(
            total=3,
            backoff_factor=0.1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        
        adapter = HTTPAdapter(
            pool_connections=50,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            pool_maxsize=100,     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
            max_retries=retry_strategy
        )
        
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)
        
        os.makedirs(self.bots_data_dir, exist_ok=True)
        
        # –°–ø–∏—Å–æ–∫ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∏–º–µ–Ω –¥–ª—è –±–æ—Ç–æ–≤
        self.space_names = [
            "Nebula", "Plasma", "Quantum", "Void", "Stellar", "Cosmic", "Galactic", "Nova",
            "Pulsar", "Quasar", "Meteor", "Asteroid", "Comet", "Eclipse", "Photon", "Proton",
            "Neutron", "Electron", "Vector", "Matrix", "Cipher", "Ghost", "Shadow", "Phantom",
            "Vortex", "Helix", "Prism", "Fusion", "Reactor", "Catalyst", "Orbit", "Horizon",
            "Zenith", "Apex", "Vertex", "Nexus", "Flux", "Pulse", "Surge", "Spark",
            "Blaze", "Flare", "Storm", "Thunder", "Lightning", "Frost", "Ice", "Fire",
            "Inferno", "Magma", "Lava", "Crystal", "Diamond", "Steel", "Titanium", "Chrome",
            "Neon", "Laser", "Beam", "Ray", "Wave", "Signal", "Code", "Data",
            "Byte", "Pixel", "Digital", "Cyber", "Tech", "Proto", "Alpha", "Beta",
            "Gamma", "Delta", "Epsilon", "Zeta", "Eta", "Theta", "Iota", "Kappa",
            "Lambda", "Mu", "Nu", "Xi", "Omicron", "Pi", "Rho", "Sigma",
            "Tau", "Upsilon", "Phi", "Chi", "Psi", "Omega", "Prime", "Zero",
            "One", "Binary", "Hex", "Core", "Node", "Link", "Grid", "Net"
        ]
        
        self.space_suffixes = [
            "X", "Z", "Prime", "Neo", "Ultra", "Max", "Pro", "Elite", "Master", "Lord",
            "2023", "2024", "V2", "V3", "Plus", "Extreme", "Force", "Power", "Titan", "King"
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Ç–æ–≤
        self.bots_data = self.load_bots_data()
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.lock = threading.Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.activity_stats = {
            "matches_started": 0,
            "matches_completed": 0,
            "queue_joins": 0,
            "queue_leaves": 0,
            "heartbeats_sent": 0,
            "errors": 0
        }
        
        # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–´–ï –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.behavior_settings = {
            BotBehavior.AGGRESSIVE: {
                "queue_probability": 0.98,  # –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                "queue_duration": (300, 1800),  # –û—á–µ–Ω—å –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏
                "match_types": [MatchType.ONE_VS_ONE, MatchType.TWO_VS_TWO, MatchType.FOUR_PLAYER_FFA],
                "activity_interval": (1, 5)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            },
            BotBehavior.CASUAL: {
                "queue_probability": 0.95,  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                "queue_duration": (240, 1200),  # –î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                "match_types": [MatchType.ONE_VS_ONE, MatchType.TWO_VS_TWO],
                "activity_interval": (2, 10)  # –û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            },
            BotBehavior.PASSIVE: {
                "queue_probability": 0.85,  # –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–¥–∞–∂–µ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö!)
                "queue_duration": (600, 2400),  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                "match_types": [MatchType.ONE_VS_ONE],
                "activity_interval": (5, 20)  # –ß–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            },
            BotBehavior.RANDOM: {
                "queue_probability": 0.97,  # –ü–æ—á—Ç–∏ 100% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                "queue_duration": (180, 900),  # –î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                "match_types": [MatchType.ONE_VS_ONE, MatchType.TWO_VS_TWO, MatchType.FOUR_PLAYER_FFA],
                "activity_interval": (1, 8)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            }
        }

    def load_bots_data(self) -> Dict:
        """üìÇ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.bots_list_file):
                with open(self.bots_list_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –±–æ—Ç–∞–º
                    for bot_id, bot_data in data.items():
                        if "behavior" not in bot_data:
                            # –ë–æ–ª—å—à–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
                            behaviors = ([BotBehavior.AGGRESSIVE] * 4 + 
                                        [BotBehavior.RANDOM] * 3 + 
                                        [BotBehavior.CASUAL] * 2 + 
                                        [BotBehavior.PASSIVE] * 1)
                            bot_data["behavior"] = random.choice(behaviors).value
                        if "in_queue" not in bot_data:
                            bot_data["in_queue"] = False
                        if "current_match_id" not in bot_data:
                            bot_data["current_match_id"] = None
                        if "queue_join_time" not in bot_data:
                            bot_data["queue_join_time"] = None
                        if "last_activity" not in bot_data:
                            bot_data["last_activity"] = None
                    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –±–æ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
                    return data
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤: {e}")
        return {}

    def save_bots_data(self):
        """üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with self.lock:
                with open(self.bots_list_file, 'w', encoding='utf-8') as f:
                    json.dump(self.bots_data, f, ensure_ascii=False, indent=2)
                logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ {len(self.bots_data)} –±–æ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤: {e}")

    def generate_unique_bot_name(self) -> str:
        """üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞"""
        while True:
            name = random.choice(self.space_names)
            if random.random() < 0.7:  # 70% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å
                name += random.choice(self.space_suffixes)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if random.random() < 0.3:  # 30% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã
                name += str(random.randint(100, 999))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if name not in [bot['username'] for bot in self.bots_data.values()]:
                return name

    def generate_bot_email(self, username: str) -> str:
        """üìß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç email –¥–ª—è –±–æ—Ç–∞"""
        domain = random.choice(['botmail.com', 'cybernet.ai', 'spacebotz.net', 'gameai.tech'])
        return f"{username.lower()}@{domain}"

    def generate_bot_password(self) -> str:
        """üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–æ—Ç–∞"""
        return ''.join(random.choices(string.ascii_letters + string.digits, k=12))

    def register_bot(self, bot_id: str) -> Optional[Dict]:
        """ü§ñ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API"""
        try:
            username = self.generate_unique_bot_name()
            email = self.generate_bot_email(username)
            password = self.generate_bot_password()
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            register_data = {
                "username": username,
                "email": email,
                "password": password,
                "avatar": f"https://robohash.org/{username}?set=set1&size=200x200"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            response = self.session.post(
                self.register_endpoint,
                json=register_data,
                timeout=30
            )
            
            if response.status_code == 201:
                bot_data = response.json()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
                bot_info = {
                    "id": bot_data["id"],
                    "username": bot_data["username"],
                    "email": bot_data["email"],
                    "password": password,
                    "avatar": bot_data["avatar"],
                    "created_at": bot_data["createdAt"],
                    "games_played": bot_data.get("gamesPlayed", 0),
                    "games_won": bot_data.get("gamesWon", 0),
                    "score": bot_data.get("score", 0),
                    "level": bot_data.get("level", 1),
                    "last_login": None,
                    "last_heartbeat": None,
                    "status": "registered",
                    "behavior": random.choice([BotBehavior.AGGRESSIVE] * 4 + 
                                               [BotBehavior.RANDOM] * 3 + 
                                               [BotBehavior.CASUAL] * 2 + 
                                               [BotBehavior.PASSIVE] * 1).value,
                    "in_queue": False,
                    "current_match_id": None,
                    "queue_join_time": None,
                    "last_activity": None
                }
                
                with self.lock:
                    self.bots_data[bot_id] = bot_info
                
                logging.info(f"‚úÖ –ë–æ—Ç {username} (ID: {bot_data['id']}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return bot_info
                
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_id}: {e}")
            return None

    def login_bot(self, bot_id: str, bot_data: Dict) -> bool:
        """üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –±–æ—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            login_data = {
                "email": bot_data["email"],
                "password": bot_data["password"]
            }
            
            response = self.session.post(
                self.login_endpoint,
                json=login_data,
                timeout=30
            )
            
            if response.status_code == 200:
                user_data = response.json()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                with self.lock:
                    self.bots_data[bot_id].update({
                        "last_login": datetime.now().isoformat(),
                        "status": "online",
                        "games_played": user_data.get("gamesPlayed", 0),
                        "games_won": user_data.get("gamesWon", 0),
                        "score": user_data.get("score", 0),
                        "level": user_data.get("level", 1)
                    })
                
                logging.info(f"‚úÖ –ë–æ—Ç {bot_data['username']} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return True
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_data['username']}: {response.status_code}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_id}: {e}")
            return False

    def send_heartbeat(self, bot_id: str, bot_data: Dict) -> bool:
        """üíì –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç heartbeat –¥–ª—è –±–æ—Ç–∞"""
        try:
            user_id = bot_data["id"]
            
            heartbeat_data = {
                "userId": user_id,
                "timestamp": datetime.now().isoformat()
            }
            
            response = self.session.post(
                self.heartbeat_endpoint,
                json=heartbeat_data,
                timeout=10
            )
            
            if response.status_code == 200:
                with self.lock:
                    self.bots_data[bot_id]["last_heartbeat"] = datetime.now().isoformat()
                    self.bots_data[bot_id]["status"] = "online"
                return True
            else:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ heartbeat –¥–ª—è –±–æ—Ç–∞ {bot_data['username']}: {response.status_code}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ heartbeat –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            return False

    def send_all_heartbeats(self) -> int:
        """üíì –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç heartbeat –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        success_count = 0
        
        with ThreadPoolExecutor(max_workers=20) as executor:
            futures = []
            
            for bot_id, bot_data in self.bots_data.items():
                future = executor.submit(self.send_heartbeat, bot_id, bot_data)
                futures.append((bot_id, future))
            
            for bot_id, future in futures:
                try:
                    if future.result(timeout=15):
                        success_count += 1
                        self.activity_stats["heartbeats_sent"] += 1
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ heartbeat –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
                    self.activity_stats["errors"] += 1
        
        return success_count

    def join_queue(self, bot_id: str, bot_data: Dict, match_type: MatchType) -> bool:
        """üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç –±–æ—Ç–∞ –∫ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            user_id = bot_data["id"]
            bot_name = bot_data.get("username", "Unknown")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ –±–æ—Ç
            if bot_data.get("in_queue", False):
                logging.warning(f"‚ö†Ô∏è –ë–æ—Ç {bot_name} —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –º–∞—Ç—á–µ –ª–∏ –±–æ—Ç
            if bot_data.get("current_match_id"):
                logging.warning(f"‚ö†Ô∏è –ë–æ—Ç {bot_name} —É–∂–µ –≤ –º–∞—Ç—á–µ")
                return False
            
            queue_data = {
                "MatchType": match_type.value
            }
            
            logging.info(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –±–æ—Ç–∞ {bot_name} (ID: {user_id}), —Ç–∏–ø: {match_type.name} ({match_type.value})")
            
            response = self.session.post(
                f"{self.queue_endpoint}/{user_id}/join",
                json=queue_data,
                timeout=10
            )
            
            logging.info(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ {bot_name}: {response.status_code}")
            
            if response.status_code == 200:
                with self.lock:
                    self.bots_data[bot_id]["in_queue"] = True
                    self.bots_data[bot_id]["queue_join_time"] = datetime.now().isoformat()
                    self.bots_data[bot_id]["last_activity"] = datetime.now().isoformat()
                    self.bots_data[bot_id]["current_match_type"] = match_type.value
                
                self.activity_stats["queue_joins"] += 1
                logging.info(f"‚úÖ –ë–æ—Ç {bot_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏ {match_type.name}")
                return True
            else:
                logging.error(f"‚ùå –û–®–ò–ë–ö–ê –≤—Ö–æ–¥–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –±–æ—Ç–∞ {bot_name}: {response.status_code} - {response.text}")
                # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            return False

    def leave_queue(self, bot_id: str, bot_data: Dict) -> bool:
        """üö™ –£–±–∏—Ä–∞–µ—Ç –±–æ—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            user_id = bot_data["id"]
            bot_name = bot_data.get("username", "Unknown")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ –±–æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
            if not bot_data.get("in_queue", False):
                logging.warning(f"‚ö†Ô∏è –ë–æ—Ç {bot_name} –ª–æ–∫–∞–ª—å–Ω–æ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
                return False
            
            response = self.session.post(
                f"{self.queue_endpoint}/{user_id}/leave",
                timeout=10
            )
            
            if response.status_code == 200:
                with self.lock:
                    self.bots_data[bot_id]["in_queue"] = False
                    self.bots_data[bot_id]["queue_join_time"] = None
                    self.bots_data[bot_id]["last_activity"] = datetime.now().isoformat()
                    self.bots_data[bot_id]["current_match_type"] = None
                
                self.activity_stats["queue_leaves"] += 1
                logging.info(f"‚úÖ –ë–æ—Ç {bot_name} –ø–æ–∫–∏–Ω—É–ª –æ—á–µ—Ä–µ–¥—å")
                return True
            elif response.status_code == 400 and "not in queue" in response.text:
                # –°–µ—Ä–≤–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –±–æ—Ç –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                logging.warning(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ë–æ—Ç {bot_name} –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                with self.lock:
                    self.bots_data[bot_id]["in_queue"] = False
                    self.bots_data[bot_id]["queue_join_time"] = None
                    self.bots_data[bot_id]["current_match_type"] = None
                return False
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –±–æ—Ç–∞ {bot_name}: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            return False

    def sync_queue_status(self, bot_id: str, bot_data: Dict) -> bool:
        """üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –±–æ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            user_id = bot_data["id"]
            bot_name = bot_data.get("username", "Unknown")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ API
            response = self.session.get(
                f"{self.queue_endpoint}/{user_id}/status",
                timeout=5
            )
            
            if response.status_code == 200:
                server_status = response.json()
                server_in_queue = server_status.get("inQueue", False)
                local_in_queue = bot_data.get("in_queue", False)
                
                # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
                if server_in_queue != local_in_queue:
                    logging.warning(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è {bot_name}: —Å–µ—Ä–≤–µ—Ä={server_in_queue}, –ª–æ–∫–∞–ª—å–Ω–æ={local_in_queue}")
                    with self.lock:
                        self.bots_data[bot_id]["in_queue"] = server_in_queue
                        if not server_in_queue:
                            self.bots_data[bot_id]["queue_join_time"] = None
                            self.bots_data[bot_id]["current_match_type"] = None
                    return True
                    
            return False
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            return False

    def simulate_bot_behavior(self, bot_id: str, bot_data: Dict) -> bool:
        """üé≠ –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            behavior = BotBehavior(bot_data.get("behavior", "random"))
            settings = self.behavior_settings[behavior]
            bot_name = bot_data.get("username", "Unknown")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                self.sync_queue_status(bot_id, bot_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –º–∞—Ç—á–µ –ª–∏ –±–æ—Ç
            if bot_data.get("current_match_id"):
                return False
            
            # –ï—Å–ª–∏ –±–æ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º timeout
            if bot_data.get("in_queue", False):
                queue_join_time = bot_data.get("queue_join_time")
                if queue_join_time:
                    join_time = datetime.fromisoformat(queue_join_time)
                    queue_duration = settings["queue_duration"]
                    max_wait = random.randint(*queue_duration)
                    
                    # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å (—Ç–æ–ª—å–∫–æ 3% —à–∞–Ω—Å)
                    if ((datetime.now() - join_time).total_seconds() > max_wait and 
                        random.random() < 0.03):
                        logging.info(f"üö™ –ë–æ—Ç {bot_name} –ø–æ–∫–∏–¥–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å (timeout –ø–æ—Å–ª–µ {max_wait} —Å–µ–∫)")
                        return self.leave_queue(bot_id, bot_data)
                
                # –î–∞–∂–µ –µ—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏–µ
                return True
            
            # –†–µ—à–∞–µ–º, –≤–æ–π—Ç–∏ –ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å - –ë–û–õ–ï–ï –ê–ì–†–ï–°–°–ò–í–ù–û
            queue_chance = random.random()
            if queue_chance < settings["queue_probability"]:
                match_type = random.choice(settings["match_types"])
                logging.info(f"üéØ –ë–æ—Ç {bot_name} ({behavior.value}) –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –æ—á–µ—Ä–µ–¥—å {match_type.name} (chance: {queue_chance:.2f})")
                return self.join_queue(bot_id, bot_data, match_type)
            
            # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤—Ö–æ–¥–∏–º –≤ –æ—á–µ—Ä–µ–¥—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–∞ {bot_id}: {e}")
            return False

    def create_bots_batch(self, start_index: int, count: int) -> List[Dict]:
        """üè≠ –°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É –±–æ—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        results = []
        
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = []
            
            for i in range(start_index, start_index + count):
                bot_id = f"bot_{i:03d}"
                future = executor.submit(self.register_bot, bot_id)
                futures.append((bot_id, future))
            
            for bot_id, future in futures:
                try:
                    result = future.result(timeout=60)
                    if result:
                        results.append(result)
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ {bot_id}: {e}")
        
        return results

    def login_all_bots(self) -> int:
        """üîë –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        success_count = 0
        
        with ThreadPoolExecutor(max_workers=15) as executor:
            futures = []
            
            for bot_id, bot_data in self.bots_data.items():
                if bot_data.get("status") != "online":
                    future = executor.submit(self.login_bot, bot_id, bot_data)
                    futures.append((bot_id, future))
            
            for bot_id, future in futures:
                try:
                    if future.result(timeout=60):
                        success_count += 1
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_id}: {e}")
        
        return success_count

    def run_bot_activity_cycle(self) -> Dict:
        """üéÆ –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤"""
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        heartbeat_success = self.send_all_heartbeats()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω –±–æ—Ç–æ–≤
        online_bots = [bot_id for bot_id, bot_data in self.bots_data.items() if bot_data.get("status") == "online"]
        logging.info(f"ü§ñ –û–Ω–ª–∞–π–Ω –±–æ—Ç–æ–≤: {len(online_bots)}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ç–æ–≤
        with ThreadPoolExecutor(max_workers=30) as executor:
            futures = []
            
            for bot_id in online_bots:
                bot_data = self.bots_data[bot_id]
                future = executor.submit(self.simulate_bot_behavior, bot_id, bot_data)
                futures.append((bot_id, future))
            
            behavior_results = []
            for bot_id, future in futures:
                try:
                    result = future.result(timeout=30)
                    behavior_results.append(result)
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–∞ {bot_id}: {e}")
        
        actions_count = sum(1 for r in behavior_results if r)
        in_queue_count = sum(1 for bot in self.bots_data.values() if bot.get("in_queue", False))
        
        logging.info(f"üéØ –î–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {actions_count}, –í –æ—á–µ—Ä–µ–¥–∏: {in_queue_count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.save_bots_data()
        
        return {
            "heartbeat_success": heartbeat_success,
            "behavior_actions": actions_count,
            "total_bots": len(self.bots_data),
            "online_bots": len(online_bots),
            "in_queue": in_queue_count
        }

    def get_queue_statistics(self) -> Optional[Dict]:
        """üìä –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π"""
        try:
            response = self.session.get(f"{self.queue_endpoint}/stats", timeout=10)
            if response.status_code == 200:
                return response.json()
            else:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π: {response.status_code}")
                return None
        except Exception as e:
            logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π: {e}")
            return None

    def get_bots_statistics(self) -> Dict:
        """üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç–∞–º"""
        total_bots = len(self.bots_data)
        online_bots = sum(1 for bot in self.bots_data.values() if bot.get("status") == "online")
        in_queue_bots = sum(1 for bot in self.bots_data.values() if bot.get("in_queue", False))
        total_games = sum(bot.get("games_played", 0) for bot in self.bots_data.values())
        total_wins = sum(bot.get("games_won", 0) for bot in self.bots_data.values())
        total_score = sum(bot.get("score", 0) for bot in self.bots_data.values())
        
        behavior_stats = {}
        for behavior in BotBehavior:
            behavior_stats[behavior.value] = sum(
                1 for bot in self.bots_data.values() 
                if bot.get("behavior") == behavior.value
            )
        
        return {
            "total_bots": total_bots,
            "online_bots": online_bots,
            "offline_bots": total_bots - online_bots,
            "in_queue_bots": in_queue_bots,
            "total_games": total_games,
            "total_wins": total_wins,
            "total_score": total_score,
            "average_score": total_score / total_bots if total_bots > 0 else 0,
            "behavior_distribution": behavior_stats,
            "activity_stats": self.activity_stats
        }

    def display_statistics(self, cycle_results: Dict = None, queue_stats: Dict = None):
        """üìä –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.get_bots_statistics()
        
        print(f"""
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë                    üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–û–í                       ‚ïë
        ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
        ‚ïë –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {stats['total_bots']:>48} ‚ïë
        ‚ïë –û–Ω–ª–∞–π–Ω: {stats['online_bots']:>53} ‚ïë
        ‚ïë –í –æ—á–µ—Ä–µ–¥–∏: {stats['in_queue_bots']:>50} ‚ïë
        ‚ïë –û–±—â–∏–π —Å—á–µ—Ç: {stats['total_score']:>49} ‚ïë
        ‚ïë –í—Å–µ–≥–æ –∏–≥—Ä: {stats['total_games']:>50} ‚ïë
        ‚ïë –í—Å–µ–≥–æ –ø–æ–±–µ–¥: {stats['total_wins']:>48} ‚ïë
        ‚ïë Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['activity_stats']['heartbeats_sent']:>39} ‚ïë
        ‚ïë –í—Ö–æ–¥–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å: {stats['activity_stats']['queue_joins']:>43} ‚ïë
        ‚ïë –í—ã—Ö–æ–¥–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {stats['activity_stats']['queue_leaves']:>41} ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """)
        
        if cycle_results:
            print(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª: {cycle_results['behavior_actions']} –¥–µ–π—Å—Ç–≤–∏–π")
        
        if queue_stats:
            print(f"üìä –û—á–µ—Ä–µ–¥–∏: 1v1={queue_stats.get('oneVsOne', 0)}, 2v2={queue_stats.get('twoVsTwo', 0)}, FFA={queue_stats.get('fourPlayerFFA', 0)}")

    def run_continuous_activity(self, duration_minutes: int = 30):
        """üîÑ –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–æ–≤"""
        logging.info(f"üéÆ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤ –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç...")
        
        start_time = datetime.now()
        end_time = start_time + timedelta(minutes=duration_minutes)
        
        cycle_count = 0
        
        while datetime.now() < end_time:
            try:
                cycle_count += 1
                logging.info(f"üîÑ –¶–∏–∫–ª #{cycle_count}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                cycle_results = self.run_bot_activity_cycle()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π
                queue_stats = self.get_queue_statistics()
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤
                if cycle_count % 5 == 0:
                    self.display_statistics(cycle_results, queue_stats)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
                time.sleep(4)
                
            except KeyboardInterrupt:
                logging.info("‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                time.sleep(10)
        
        logging.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–µ–Ω–æ {cycle_count} —Ü–∏–∫–ª–æ–≤")

    def reset_queue_states(self):
        """üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        logging.info("üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        
        reset_count = 0
        with self.lock:
            for bot_id, bot_data in self.bots_data.items():
                if bot_data.get("in_queue", False):
                    bot_data["in_queue"] = False
                    bot_data["queue_join_time"] = None
                    bot_data["current_match_type"] = None
                    reset_count += 1
        
        logging.info(f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è {reset_count} –±–æ—Ç–æ–≤")
        self.save_bots_data()

    def initialize_bots(self, target_count: int = 100):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–æ–≤"""
        logging.info("üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤...")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.reset_queue_states()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤
        existing_bots = len(self.bots_data)
        bots_to_create = target_count - existing_bots
        
        if bots_to_create > 0:
            logging.info(f"ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ {bots_to_create} –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–æ–≤ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 20
            batch_size = 20
            for i in range(0, bots_to_create, batch_size):
                current_batch = min(batch_size, bots_to_create - i)
                logging.info(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –±–æ—Ç–æ–≤ {i+1}-{i+current_batch}...")
                
                self.create_bots_batch(existing_bots + i + 1, current_batch)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                self.save_bots_data()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                time.sleep(2)
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        logging.info("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        success_count = self.login_all_bots()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.save_bots_data()
        
        logging.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ {success_count} –±–æ—Ç–æ–≤")

    def sync_all_queue_states(self):
        """üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
        logging.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—á–µ—Ä–µ–¥–µ–π...")
        
        sync_count = 0
        with ThreadPoolExecutor(max_workers=20) as executor:
            futures = []
            
            for bot_id, bot_data in self.bots_data.items():
                if bot_data.get("status") == "online":
                    future = executor.submit(self.sync_queue_status, bot_id, bot_data)
                    futures.append((bot_id, future))
            
            for bot_id, future in futures:
                try:
                    if future.result(timeout=10):
                        sync_count += 1
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        
        logging.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {sync_count} –±–æ—Ç–æ–≤")

    def run_manager(self):
        """üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤"""
        logging.info("üéÆ –ó–∞–ø—É—Å–∫ SECS Unified Bot Manager...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
        self.initialize_bots()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π heartbeat
        logging.info("üíì –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        heartbeat_success = self.send_all_heartbeats()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.sync_all_queue_states()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.save_bots_data()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.display_statistics()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º —Ü–∏–∫–ª–æ–º
        self.run_continuous_activity(30)
        
        logging.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")


def main():
    """üéØ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                       üéÆ SECS Unified Bot Manager v2.0                                ‚ïë
    ‚ïë                     Space Epic Combat Simulator                                        ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º:                                          ‚ïë
    ‚ïë   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–æ–≤                                                      ‚ïë
    ‚ïë   ‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ heartbeat —Å–∏—Å—Ç–µ–º–∞                                                    ‚ïë
    ‚ïë   ‚Ä¢ –ú–∞—Ç—á–º–µ–π–∫–∏–Ω–≥ –∏ –æ—á–µ—Ä–µ–¥–∏                                                              ‚ïë
    ‚ïë   ‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–æ–≤                                                     ‚ïë
    ‚ïë   ‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥                                                  ‚ïë
    ‚ïë                                                                                        ‚ïë
    ‚ïë üöÄ –ì–æ—Ç–æ–≤ –∫ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º —Å—Ä–∞–∂–µ–Ω–∏—è–º!                                                      ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('bot_manager.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    try:
        manager = UnifiedBotsManager()
        manager.run_manager()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–æ–≤...")
        logging.info("‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 