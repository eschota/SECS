using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.Sqlite;
using Server.Data;
using Server.Models;
using Server.Services;

namespace Server.Controllers;

/// <summary>
/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è in-memory –æ—á–µ—Ä–µ–¥—è–º–∏ –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞.
/// –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—á–µ—Ä–µ–¥—è–º–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞.
/// </summary>
[ApiController]
[Route("api-game-queue")]
public class QueueController : ControllerBase
{
    private readonly GameDbContext _context;
    private readonly InMemoryMatchmakingService _memory;

    public QueueController(GameDbContext context, InMemoryMatchmakingService memory)
    {
        _context = context;
        _memory = memory;
    }

    /// <summary>
    /// –í–æ–π—Ç–∏ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞ (in-memory).
    /// </summary>
    [HttpPost("{userId}/join")]
    public async Task<ActionResult> JoinQueue(int userId, [FromBody] JoinQueueRequest request)
    {
        var logger = HttpContext.RequestServices.GetRequiredService<ILogger<QueueController>>();
        logger.LogInformation($"üéÆ Player {userId} attempting to join queue for match type {request.MatchType}");
        
        var user = await _context.Users.FindAsync(userId);
        if (user == null)
            return NotFound("User not found");

        // In-memory –æ—á–µ—Ä–µ–¥—å
        _memory.RemoveFromQueue(userId, request.MatchType); // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é
        
        var queueEntry = new MatchQueue
        {
            UserId = userId,
            MatchType = request.MatchType,
            MmrRating = GetUserMmrForType(user, request.MatchType),
            JoinTime = DateTime.UtcNow
        };
        
        _memory.AddToQueue(queueEntry);
        
        logger.LogInformation($"‚úÖ Player {userId} ({user.Username}) joined in-memory queue for {request.MatchType}");
        return Ok(new { message = "Successfully joined queue", queueType = request.MatchType });
    }

    /// <summary>
    /// –í—ã–π—Ç–∏ –∏–∑ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –ø–æ–∏—Å–∫–∞ (in-memory).
    /// </summary>
    [HttpPost("{userId}/leave")]
    public async Task<ActionResult> LeaveQueue(int userId)
    {
        var logger = HttpContext.RequestServices.GetRequiredService<ILogger<QueueController>>();
        
        var user = await _context.Users.FindAsync(userId);
        if (user == null)
            return NotFound("User not found");

        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        foreach (GameMatchType type in Enum.GetValues(typeof(GameMatchType)))
            _memory.RemoveFromQueue(userId, type);
        
        logger.LogInformation($"‚úÖ Player {userId} ({user.Username}) left all in-memory queues");
        return Ok(new { message = "Successfully left queue" });
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ (in-memory).
    /// </summary>
    [HttpGet("{userId}/status")]
    public async Task<ActionResult> GetQueueStatus(int userId)
    {
        var user = await _context.Users.FindAsync(userId);
        if (user == null)
            return NotFound("User not found");

        // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –≤–æ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥—è—Ö
        foreach (GameMatchType type in Enum.GetValues(typeof(GameMatchType)))
        {
            var queue = _memory.GetQueue(type).FirstOrDefault(q => q.UserId == userId);
            if (queue != null)
            {
                var queueTime = DateTime.UtcNow - queue.JoinTime;
                var currentThreshold = queue.CalculateCurrentMmrThreshold();
                return Ok(new
                {
                    inQueue = true,
                    queueType = queue.MatchType,
                    queueTime = (int)queueTime.TotalSeconds,
                    currentMmrThreshold = currentThreshold,
                    userMmr = queue.MmrRating
                });
            }
        }
        
        return Ok(new { inQueue = false });
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º in-memory –æ—á–µ—Ä–µ–¥—è–º.
    /// </summary>
    [HttpGet("stats")]
    public ActionResult GetQueueStats()
    {
        var oneVsOneCount = _memory.GetQueue(GameMatchType.OneVsOne).Count;
        var twoVsTwoCount = _memory.GetQueue(GameMatchType.TwoVsTwo).Count;
        var ffaCount = _memory.GetQueue(GameMatchType.FourPlayerFFA).Count;
        
        return Ok(new
        {
            oneVsOne = oneVsOneCount,
            twoVsTwo = twoVsTwoCount,
            fourPlayerFFA = ffaCount,
            total = oneVsOneCount + twoVsTwoCount + ffaCount
        });
    }

    private static int GetUserMmrForType(User user, GameMatchType matchType)
    {
        return matchType switch
        {
            GameMatchType.OneVsOne => user.MmrOneVsOne,
            GameMatchType.TwoVsTwo => user.MmrTwoVsTwo,
            GameMatchType.FourPlayerFFA => user.MmrFourPlayerFFA,
            _ => 0
        };
    }
}

public class JoinQueueRequest
{
    public GameMatchType MatchType { get; set; }
} 